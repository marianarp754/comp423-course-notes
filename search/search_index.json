{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Mariana's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a Dev Container for Go","text":"<ul> <li>Primary author: Mariana Rodriguez-Pacheco</li> <li> <p>Reviewer: Ashley Pearson</p> </li> <li> <p>Prerequisites</p> <ul> <li>Install Git, Visual Studio Code (VSCode), and Docker.</li> <li>Create a GitHub account.</li> <li>Ensure the <code>Dev Containers</code> VSCode plugin is installed.</li> <li>Ensure the <code>Go</code> VSCode Plugin (Made by the Go Team at Google) is installed.</li> </ul> </li> <li> <p>Instructions for initializing a new Git repository</p> <ul> <li>In your terminal, create a new directory called <code>go-tutorial</code> and initialize a new Git repository:     <pre><code>mkdir go-tutorial\ncd go-tutorial\ngit init\n</code></pre></li> <li>Create a <code>README.md</code> file in your <code>go-tutorial</code> directory and commit its changes.      <pre><code>echo \"# COMP_423_Go_Hello_World\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> <li>Now, navigate to your browser and log into your GitHub account. </li> <li>Create a new repository with the following details:<ul> <li>Name: comp423-go-hello-world</li> <li>Description: \"Getting started with Go.\"</li> <li>Visibility: Public</li> <li>Leave the <code>Add a README file</code> unchecked.</li> </ul> </li> <li>Navigate back to your terminal and add your GitHub <code>comp423-go-hello-world</code> repository as a remote repository.      <pre><code>git remote add origin https://github.com/&lt;username&gt;/comp423-go-hello-world.git\n</code></pre></li> </ul> <p>Note</p> <p>Check that your default branch is named <code>main</code> by typing <code>git branch</code> into the terminal. If it is not, rename it using <code>git branch -M main</code>.</p> <ul> <li>Push your local commits to GitHub:     <pre><code>git push -u origin main\n</code></pre></li> </ul> </li> <li> <p>Instructions for Creating a New Dev Container Project for Go </p> <ul> <li>In your terminal, create a <code>.devcontainer</code> directory in your <code>go-tutorial</code> directory.     <pre><code>mkdir .devcontainer\n</code></pre></li> <li>Navigate to VSCode and open your <code>go-tutorial</code> directory.</li> <li>Create a <code>devcontainer.json</code> file in your <code>.devcontainer</code> directory and use a Microsoft Go Dev Container base image.     <pre><code>{\n    \"name\": \"Go Dev Container\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:0-1\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\"golang.go\"]\n        }\n    }\n}\n</code></pre></li> <li>Open the Command Palette (Control+Shift+P) and run Dev Containers: Reopen in Container.</li> </ul> <p>Note</p> <p>To check if you have successfully reopened your project in a Dev Container, open a terminal in VSCode and run <code>go version</code> to check that your dev container is running a recent version of Go. </p> </li> <li> <p>Dev Container Configuration File Explanations</p> <ul> <li>The devcontainer.json file configures your development environment. In this example:<ul> <li>name: provides a descriptive name for your dev container</li> <li>image: specifies the Docker image to use</li> <li>customizations: configures VS Code by adding useful extensions </li> </ul> </li> </ul> </li> <li> <p>Create and Run a \"Hello COMP423\" Program</p> <ul> <li>In VSCode, create a <code>main.go</code> file in your <code>go-tutorial</code> directory that includes:     <pre><code>package main\n\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre></li> <li>In your terminal in VSCode, run Go:     <pre><code>go run main.go\n</code></pre></li> <li>Then, build the Program:     <pre><code>go build main.go\n./main\n</code></pre></li> </ul> <p>Note</p> <p>The <code>go build</code> command compiles Go code into a standalone binary executable, similar to how <code>gcc</code> compiles C code in COMP211. This binary can run independently, making it ideal for production use. On the other hand, <code>go run</code> compiles and executes the code in one step without creating a reusable binary, making it more convenient for quick testing and development. </p> </li> <li> <p>The Program's Requirement is that it Prints \"Hello COMP423\" Out to Standard Output</p> <ul> <li>The program should output the text <code>\"Hello COMP423\"</code> to the terminal when executed.</li> <li>Once your program executes successfully, push your finished product to GitHub.      <pre><code>git add .\ngit commit -m \"My first Go Hello World Program\"\ngit push -u origin main\n</code></pre></li> </ul> </li> </ul>"}]}